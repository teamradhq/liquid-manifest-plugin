import path from 'path';
import fs from 'fs';

import liquid from '@/lib/liquid';
import chunks from '@/lib/chunks';
import files from '@/lib/files';

const devMode = process.env.MODE === 'development';

const TEMPLATE_MESSAGE = `${liquid.comment('\tThis file is generated by webpack.\n\tDo not edit it directly.', '\n')}\n`;

/** Generate a text block to assign a liquid asset variable */
const assetVarBlock = ({ name, file, variable }) => {
  let block = '';

  block += liquid.comment(name);
  block += liquid.variable('assetPath', `'${file}' | asset_url | split: '?'`);
  block += `{% assign ${liquid.variableName(variable)} = assetPath[0] %}\n`;

  return block;
};

const liquidTemplate = (assets) => TEMPLATE_MESSAGE + assets
  .reduce((str, asset) => str + assetVarBlock(asset), '');

/** @return {Object} Assets to include. */
const reduceFilesToAssets = (obj, { file, varname }) => {
  const [asset, name, ext] = file.match(/(.*)\.((cs|j)s)$/);

  return {
    ...obj,
    [name]: {
      file,
      ext,
      variable: varname || liquid.variableName(file),
    },
  };
};

const reduceAssetToLiquidVars = (chunks) => (vars, [key, { file, ext, variable }]) => [
  ...vars,
  {
    name: file,
    file: chunks[key].files.find((str) => str.endsWith(ext)),
    variable,
  }
];

/**
 * Creates a liquid template that that defines variables from our asset
 * manifest files. This will allow us to utilise dynamic chunk names.
 */
class LiquidManifestPlugin {
  constructor(options) {
    this.options = options;
  }

  apply(compiler) {
    const {
      output,
      publicpath = '',
      filename = 'manifest.liqud',
      files: inputFiles = [],
    } = this.options;

    compiler.hooks.done.tap('LiquidManifestPlugin', (stats) => {
      if (!fs.existsSync(output)) {
        console.log("Output path doesn't exist");
      }

      const assets = files.parse(inputFiles);
      const chunksData = chunks.memoiseChunks(stats.compilation.chunks);

// const reduceAssetToLiquidVars = (chunks) => (vars, [key, { file, ext, variable }]) => [
//   ...vars,
//   {
//     name: file,
//     file: chunks[key].files.find((str) => str.endsWith(ext)),
//     variable,
//   }
// ];

      const liquidVars = Object.entries(assets).reduce((arr, [key, current]) => {
        console.log('arrarr');
        console.log(arr);
        arr.push({
          ...current,
          variable: liquid.variableName(current.varname || current.file),
          file: chunksData[current.name].files.find((str) => str.endsWith(current.ext))
        })

        return arr;
      }, []);
      console.log(liquidVars);
      //   .reduce(reduceAssetToLiquidVars(chunksData), []);

      fs.writeFileSync(
        `${output}/${filename}`,
        liquidTemplate(liquidVars, publicpath),
      );
    });
  }
}

export default LiquidManifestPlugin;
