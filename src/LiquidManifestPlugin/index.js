const path = require('path');
const fs = require('fs');

const devMode = process.env.MODE === 'development';

const liquidComment = (msg, div = ' ') => `{% comment %}${div}${msg}${div}{% endcomment %}\n`;

const TEMPLATE_MESSAGE = `${liquidComment('\tThis file is generated by webpack.\n\tDo not edit it directly.', '\n')}\n`;

const HASHES = {
  css: 'css/mini-extract',
  js: 'javascript',
};

/** File name -> liquid var name */
const variableName = (str) => str.replace(/\.([a-zA-Z])/g, (m, grp) => grp.toUpperCase());

/** Generate a text block to assign a liquid asset variable */
const liquidVarBlock = ({ name, file, variable }) => {
  let block = '';

  block += liquidComment(name);
  block += `{% assign assetPath = '${file}' | asset_url | split: '?' %}\n`;
  block += `{% assign ${variable} = assetPath[0] %}\n`;

  return block;
};

const liquidTemplate = (assets) => TEMPLATE_MESSAGE + assets
  .reduce((str, asset) => str + liquidVarBlock(asset), '');

/** @return {Object} Output chunks */
const toChunksObject = (stats) => stats.compilation.chunks
  .reduce((data, chunk) => ({
    ...data,
    [chunk.name]: chunk,
  }), {});

/** @return {Object} Assets to include. */
const reduceFilesToAssets = (obj, { file, varname }) => {
  const [asset, name, ext] = file.match(/(.*)\.((cs|j)s)$/);

  return {
    ...obj,
    [name]: {
      file,
      ext,
      variable: varname || variableName(file),
    },
  };
};

const reduceAssetToLiquidVars = (chunks) => (vars, [key, { file, ext, variable }]) => {
  console.log(Object.keys(chunks));
  vars.push({
    name: file,
    file: chunks[key].files.find((str) => str.endsWith(ext)),
    variable,
  });

  return vars;
};

/**
 * Creates a liquid template that that defines variables from our asset
 * manifest files. This will allow us to utilise dynamic chunk names.
 */
class LiquidManifestPlugin {
  constructor(options) {
    this.options = options;
  }

  apply(compiler) {
    const {
      output,
      publicpath = '',
      filename = 'manifest.liqud',
      files = [],
    } = this.options;

    compiler.hooks.done.tap('LiquidManifestPlugin', (stats) => {
      if (!fs.existsSync(output)) {
        console.log("Output path doesn't exist");
      }

      const assets = files.reduce(reduceFilesToAssets, []);
      const chunks = toChunksObject(stats);

      console.log(assets);

      const liquidVars = Object.entries(assets)
        .reduce(reduceAssetToLiquidVars(chunks), []);

      fs.writeFileSync(
        `${output}/${filename}`,
        JSON.stringify(assets, null, 2) + liquidTemplate(liquidVars, publicpath),
      );
    });
  }
}

module.exports = LiquidManifestPlugin;
